package com.nt.controller;

import static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.user;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.nt.model.User;
import com.nt.model.Wallet;
import com.nt.model.WalletTransaction;
import com.nt.service.UserService;
import com.nt.service.WalletService;

import jakarta.persistence.criteria.Order;

@RestController
@RequestMapping("/api")
public class WalletController {
	
	@Autowired
	private WalletService walletService;
	@Autowired
	private UserService userService;
	
	@GetMapping("/wallet")
	ResponseEntity<Wallet> getUserWallet(@RequestHeader("Authorization") String jwt) throws Exception{
		 
		User user=userService.findUserProfileByJwt(jwt);
		Wallet wallet=walletService.getUserWallet(user);
		return new ResponseEntity<>(wallet,HttpStatus.ACCEPTED);
	}
	
	@GetMapping("/wallet/{walletId}/transfer")
	ResponseEntity<Wallet> walletToWalletTransfer(@RequestHeader("Authorization") String jwt,
												@PathVariable Long walletId,
												@RequestBody WalletTransaction req) throws Exception{
		 
		User senderUser=userService.findUserProfileByJwt(jwt);
		Wallet reciverWallet=walletService.findWalletById(walletId);
		Wallet wallet=walletService.wallteToWalletTransfer(senderUser, reciverWallet,req.getAmount());
		return new ResponseEntity<>(wallet,HttpStatus.ACCEPTED);
	}
	
	@GetMapping("/wallet/order/{orderId}/pay")
	ResponseEntity<Wallet> PayOrderPayment(@RequestHeader("Authorization") String jwt,
												@PathVariable Long orderId
												) throws Exception{
		 
		User senderUser=userService.findUserProfileByJwt(jwt);
		
		Order order=orderService.getorderById(orderId);
		Wallet wallet=walletService.payOrderPayment(order,user);
	 
		return new ResponseEntity<>(wallet,HttpStatus.ACCEPTED);
	}

}
