package com.nt.service;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.nt.domain.OrderStatus;
import com.nt.domain.OrderType;
import com.nt.model.Coin;
import com.nt.model.Order;
import com.nt.model.OrderItem;
import com.nt.model.User;
import com.nt.respository.OrderItemRepository;
import com.nt.respository.OrderRepository;


@Service
public class OrderServiceImpl implements OrderService {
	
	
	@Autowired
	private OrderRepository orderRepository;
	@Autowired
	private WalletService walletService;
	@Autowired
	private OrderItemRepository orderItemRepository;

	@Override
	public Order createOrder(User user, OrderItem orderItem, OrderType orderType) {
		double price=orderItem.getCoin().getCurrentPrice()*orderItem.getQuantity();
		
		Order order=new Order();
		order.setUser(user);
		order.setOrderItem(orderItem);
		order.setOrderType(orderType);
		order.setPrice(BigDecimal.valueOf(price));
		order.setTimestamp(LocalDateTime.now());
		order.setStatus(OrderStatus.PENDING);
		return orderRepository.save(order);
	}

	@Override
	public Order getOrderById(Long orderId) throws Exception {
		
		return orderRepository.findById(orderId).orElseThrow(()->new Exception("order not found"));
	}

	@Override
	public List<Order> getAllOrderOfUser(Long orderId, OrderType orderType, String assetSymbol) {
		
		return orderRepository.findByUserId(orderId);
	}
	private OrderItem createOrderItem(Coin coin,double quantity,double buyPrice,double sellPrice) {
		
		OrderItem orderItem=new OrderItem();
		orderItem.setCoin(coin);
		orderItem.setQuantity(quantity);
		orderItem.setBuyPrice(buyPrice);
		orderItem.setSellPrice(sellPrice);
		return orderItemRepository.save(orderItem);
		
	}
	
	@Transactional
	private Order buyAsset(Coin coin,double quantity,User user) throws Exception {
		
		if(quantity<=0) {
			throw new Exception("quantity shoud be>0");
		}
		double buyPrice=coin.getCurrentPrice();
		
		OrderItem orderItem=createOrderItem(coin,quantity,buyPrice,0);
		Order order=createOrder(user,orderItem,OrderType.BUY);
		orderItem.setOrder(order);
		
		walletService.payOrderPayment(order, user);
		order.setStatus(OrderStatus.SUCCESS);
		order.setOrderType(OrderType.BUY);
		Order savedOrder=orderRepository.save(order);
		return savedOrder;
		
	}
	
	@Transactional
	private Order sellAsset(Coin coin,double quantity,User user) throws Exception {
		
		if(quantity<=0) {
			throw new Exception("quantity shoud be>0");
		}
		double sellPrice=coin.getCurrentPrice();
		
		double buyPrice=assetTosell.getPrice();
		
		OrderItem orderItem=createOrderItem(coin,quantity,buyPrice,sellPrice);
		Order order=createOrder(user,orderItem,OrderType.BUY);
		orderItem.setOrder(order);
		
		walletService.payOrderPayment(order, user);
		order.setStatus(OrderStatus.SUCCESS);
		order.setOrderType(OrderType.BUY);
		Order savedOrder=orderRepository.save(order);
		return savedOrder;
		
	}

	@Override
	public Order processOrder(Coin coin, double quantity, OrderType orderType, User user) {
		// TODO Auto-generated method stub
		return null;
	}

}
